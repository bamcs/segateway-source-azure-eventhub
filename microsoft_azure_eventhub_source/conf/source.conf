# rewrite segway-microsoft-azuread-cloud{
#     set("${.Vendor.tenantId}",value(".ecs.cloud.account.id"));
#     set("azure",value(".ecs.cloud.provider"));
#     set("${.Vendor.location}", value(".ecs.cloud.region"));
#     set("AzureAD",value(".ecs.cloud.service.name"));

#     set("${.Vendor.tenantId}",value(".ecs.cloud.target.account.id"));
#     set("azure",value(".ecs.cloud.target.provider"));
#     set("${.Vendor.location}", value(".ecs.cloud.target.region"));
#     set("AzureAD",value(".ecs.cloud.target.service.name"));

#     set("${.Vendor.properties.homeTenantId}",value(".ecs.cloud.origin.account.id"));
#     set("azure",value(".ecs.cloud.origin.provider"));
#     set("AzureAD",value(".ecs.cloud.target.service.name"));

#     unset(value('.Vendor.tenantId'));
#     unset(value('.Vendor.location'));
#     unset(value('.Vendor.properties.homeTenantId'));

# };

# rewrite segway-microsoft-azuread-source{
#     set("${.Vendor.properties.userDisplayName}", value(".ecs.source.user.full_name"));
#     set("${.Vendor.properties.userId}", value(".ecs.source.user.id"));
#     set("${.Vendor.properties.userPrincipalName}", value(".ecs.source.user.name"));

#     unset(value(".Vendor.properties.userDisplayName"));
#     unset(value(".Vendor.properties.userId"));
#     unset(value(".Vendor.properties.userPrincipalName"));
# };

block parser p_segway-microsoft-azure-azuread() {
    channel {
        parser {
            regexp-parser(
                patterns('providers?\/(?<vendor>[^\/]+)\.(?<product>[^\/]+)')
                prefix(".tmp.")
                template('${.Vendor.resourceId}')
                flags(ignore-case)
            );
        };
        rewrite{
            set('$(strip "$(lowercase "${.tmp.vendor}")")', value('.ecs.labels.vendor'));
            set('$(strip "$(lowercase "${.tmp.product}")")', value('.ecs.labels.product'));
            set('aad', value('.ecs.labels.suite') condition("${.ecs.labels.product}" eq "aadiam"));
            set('azure', value('.ecs.labels.suite') condition("${.ecs.labels.product}" ne "aadiam"));
            set-tag("vendor:${.ecs.labels.vendor}");
            set-tag("product:${.ecs.labels.product}");
            set-tag("suite:${.ecs.labels.suite}");
        };
        if {
            filter {
                "${.ecs.labels.product}" eq "aadiam"
            };
            parser {
                app-parser(topic(segway-microsoft-aad-mapping));
            };
        } elif {
            parser {
                app-parser(topic(segway-microsoft-azure-mapping));
            };
        };
   };
};
application a_segway-microsoft-azure-azuread[segway-microsoft-eventhub-azure] {
	filter {
        "${.Vendor.resourceId}" != null(0);
        # "${.Vendor.resourceId}" ne ""
    };
    parser { p_segway-microsoft-azure-azuread(); };
};
block parser p_segway-microsoft-defender() {
 channel {
        rewrite{
            set('microsoft', value('.ecs.labels.vendor'));
            set('defender', value('.ecs.labels.product'));
            set('defender', value('.ecs.labels.suite'));
            set-tag("vendor:${.ecs.labels.vendor}");
            set-tag("product:${.ecs.labels.product}");
            set-tag("suite:${.ecs.labels.suite}");
        };
        if {
            parser {
                app-parser(topic(segway-microsoft-defender-mapping));
            };
        };
   };
};
application a_segway-microsoft-defender[segway-microsoft-eventhub-azure] {
	filter {
        match('AdvancedHunting-' value('.Vendor.category') type(string) flags(prefix));
    };
    parser { p_segway-microsoft-defender(); };
};

block parser p_segway-microsoft-intune() {
 channel {
        rewrite{
            set('microsoft', value('.ecs.labels.vendor'));
            set('intune', value('.ecs.labels.product'));
            set('intune', value('.ecs.labels.suite'));
            set-tag("vendor:${.ecs.labels.vendor}");
            set-tag("product:${.ecs.labels.product}");
            set-tag("suite:${.ecs.labels.suite}");
        };
        if {
            parser {
                app-parser(topic(segway-microsoft-intune-mapping));
            };
        };
   };
};
application a_segway-microsoft-intune[segway-microsoft-eventhub-intune] {
	parser { p_segway-microsoft-intune(); };
};
# template t_segway_msg_only {
#     template("$MSG");
# };
# template t_segway_rawmsg_only {
#     template("$RAWMSG");
# };
# template t_segway_microsoft_azure_properties_log {
#     template("${.Vendor.properties.log}");
# };
# filter f_segway_microsoft_azure_properties_log {
#     "${.Vendor.properties.log}" ne ""
# };
source s_microsoft_eventhub{
    channel {
        source {
            python(
                class("microsoft_azure_eventhub_source.LogSourcePlugin.LogSourcePlugin")
                flags(
                    assume-utf8,
                )
                log-iw-size(1000)
                tags(
                    'transport:eventhub',
                    'structured:true'
                )
            );
        };
        if {
            parser {
                app-parser(topic(segway-microsoft-eventhub-`SEGWAY_APP_PARSER`));
            };
        };
        rewrite {
            set('', value('HOST'));
            set('', value('FROM_HOST'));

        };
        rewrite {
            set('${S_ISODATE}', value('.ecs.@timestamp'));
            set('8.8', value('.ecs.ecs.version'));
        };
    };
};
