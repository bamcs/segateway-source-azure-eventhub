rewrite segway-microsoft-azuread-cloud{
    set("${.Vendor.tenantId}",value(".ecs.cloud.account.id"));
    set("azure",value(".ecs.cloud.provider"));
    set("${.Vendor.location}", value(".ecs.cloud.region"));
    set("AzureAD",value(".ecs.cloud.service.name"));

    set("${.Vendor.tenantId}",value(".ecs.cloud.target.account.id"));
    set("azure",value(".ecs.cloud.target.provider"));
    set("${.Vendor.location}", value(".ecs.cloud.target.region"));
    set("AzureAD",value(".ecs.cloud.target.service.name"));

    set("${.Vendor.properties.homeTenantId}",value(".ecs.cloud.origin.account.id"));
    set("azure",value(".ecs.cloud.origin.provider"));
    set("AzureAD",value(".ecs.cloud.target.service.name"));

    unset(value('.Vendor.tenantId'));
    unset(value('.Vendor.location'));
    unset(value('.Vendor.properties.homeTenantId'));

};

rewrite segway-microsoft-azuread-source{
    set("${.Vendor.properties.userDisplayName}", value(".ecs.source.user.full_name"));
    set("${.Vendor.properties.userId}", value(".ecs.source.user.id"));
    set("${.Vendor.properties.userPrincipalName}", value(".ecs.source.user.name"));

    unset(value(".Vendor.properties.userDisplayName"));
    unset(value(".Vendor.properties.userId"));
    unset(value(".Vendor.properties.userPrincipalName"));
};

block parser segway-microsoft-azuread-signinglogs() {
 channel {
        # rewrite{
        #     set('', value('.ecs.client.ip'));
        # };
        rewrite(segway-microsoft-azuread-cloud);
        rewrite(segway-microsoft-azuread-source);
   };
};
application segway-microsoft-azuread-signinglogs[segway-microsoft-azuread] {
	filter {
        "${.Vendor.category}" == "SignInLogs";
    };
    parser { segway-microsoft-azuread-signinglogs(); };
};

template t_segway_msg_only {
    template("$MSG");
};
template t_segway_rawmsg_only {
    template("$RAWMSG");
};
template t_segway_microsoft_azure_properties_log {
    template("${.Vendor.properties.log}");
};
filter f_segway_microsoft_azure_properties_log {
    "${.Vendor.properties.log}" ne ""
};
source s_microsoft_eventhub{
    channel {
        source {
            python(
                class("microsoft_azure_eventhub_source.LogSourcePlugin.LogSourcePlugin")
                flags(
                    assume-utf8,
                )
                log-iw-size(1000)
                tags(
                    'transport:eventhub',
                    'structured:true',
                    'vendor:`SEGWAY_SOURCE_VENDOR`',
                    'product:`SEGWAY_SOURCE_PRODUCT`',
                )
            );
        };
        parser {
            json-parser (prefix(".Vendor."));
        };
        rewrite {
            set('', value('HOST'));
            set('', value('FROM_HOST'));
            set('t_segway_rawmsg_only', value('.segway.msgtemplate'));
            set(
                    't_segway_microsoft_azure_properties_log',
                    value('.segway.msgtemplate')
                    condition(filter(f_segway_microsoft_azure_properties_log))
                );
        };
        if ("${.Vendor.time}" ne "") {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.Vendor.time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('event', value('.ecs.labels.timesource'));
            };
        } else {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.internal.enqueued_time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('enqueue', value('.ecs.labels.timesource'));
            };
        };
        rewrite {
            set('${S_ISODATE}', value('.ecs.@timestamp'));
            set('`SEGWAY_SOURCE_VENDOR`', value('.ecs.labels.vendor'));
            set('`SEGWAY_SOURCE_PRODUCT`', value('.ecs.labels.product'));
            set('8.8', value('.ecs.ecs.version'));
        };
        if {
            parser {
                app-parser(topic(segway-`SEGWAY_APP_PARSER`));
            };
        };
    };
};
